#문자열자르기
>>> split_jusik = my_jusik.split(' ')
>>> split_jusik
['naver', 'daum']
>>> print(split_jusik[0])

#리스트 인덱싱
               0     1     2     3     4    5
>>> daishin = [ 9130, 9150, 9150, 9300, 9400 ]
              -5    -4    -3    -2    -1
              
>>> daishin[a:b] a 시작위치 b 종료위치 갯수 b-a 만약 b가 음수이면 a+b

#리스트삽입
>>> kospi_top10.append('SK텔레콤') #제일끝
>>> kospi_top10.insert(3, 'SK 텔레콤')
#리스트 삭제
>>> del kospi_top10[-1]

#튜플
튜플은 리스트보다 속도가 빠르다는 장점

>>> t = ('Samsung', 'LG', 'SK')
>>> t
('Samsung', 'LG', 'SK')
>>> 

#리스트[] 튜플() 딕셔너리{}

#딕셔너리
>>> cur_price ={}
>>> cur_price['daeshin']=3000
>>> cur_price['daum kakao']=8000
>>> cur_price
{'daeshin': 3000, 'daum kakao': 8000}
>>> cur_price['daum kakao']
8000
>>> del cur_price['daeshin']

>>> cur_price = {'Daum KAKAO': 80000, 'naver':800000, 'daeshin':30000}

>>> cur_price.keys()
dict_keys(['daeshin', 'daum kakao'])
>>> list(cur_price.keys())
['daeshin', 'daum kakao']

>>> 'daeshin' in cur_price.keys()
True
>>> 

# 참고로 C/C++ 또는 자바 같은 프로그래밍 언어에서는 동시에 수행될 코드 블록을 { } 기호로 감싸서 표현하는 반면 
파이썬에서는 들여쓰기를 통해 코드 블록을 표현합니다.

>>> wikibooks_cur_price = 11000
>>> if wikibooks_cur_price >= 10000:
        print("Buy 5")
        print("Buy 5")
        print("Buy 5")

# 파이썬은 if else 문 사용할때 들여쓰기를 맞춰야 에러가 나지않음

>>> price = 7000
>>> if price < 1000:
        bid = 1
elif price >= 1000 and price < 5000:
        bid = 5
elif price >= 5000 and price < 10000:
        bid = 10
elif price >= 10000 and price < 50000:
        bid = 50
elif price >= 50000 and price < 100000:
        bid = 100
elif price >= 100000 and price < 500000:
        bid = 500
elif price >= 500000:
        bid = 1000

# for
### range에서 중요한 점은 시작 숫자와 끝 숫자를 지정했을 때 끝 숫자는 범위에 포함되지 않는다는 점
range(1,10) >> 1,2,3,4,5,6,7,8,9

>>> naver_closing_price
[461500, 501000, 500500, 488500]
>>> for i in naver_closing_price :
	print("%s 원" %i)

	
461500 원
501000 원
500500 원
488500 원
>>> 

 # pass 키워드는 아무것도 수행하지 않음
