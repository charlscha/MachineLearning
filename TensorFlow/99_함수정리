@@@@@@@@  tf.sigmoid
    # 모든 실수 입력 값을 0보다 크고 1보다 작은 미분 가능한 수로 변환하는 특징
    # sigmoid의 반환 값은 확률형태(0~1사이 값)이기 때문에 결과를 확률로 해석할 때 유용
    ## 문제점
    # 입력 값이 일정 범위의 safety zone[-4 ~ 4]을 넘어가게 되면 0 또는 1로 수렴하게 되고 gradient(경사값) 또한 0으로 수렴해 버리게 됩니다. 양 끝이 평평해 지기 때문입니다.
    # sigmoid function의 범위가 [0, 1]입니다. 이 때문에 output의 중앙값이 0이 아니게 됩니다. 0을 기준으로 데이터가 분포하게 되었을 때가 이상적인데 Sigmoid에서는 하나의 단점이 됩니다.
    # Relu와 비교해 보았을 때, exp() 연산에 많은 cost가 듭니다.


@@@@@@@@  tf.set_random_seed(777)  # for reproducibility 
    #모든 연산에 의해 생성된 난수 시퀀스들이 세션간 반복이 가능하게 하기위해서, 그래프 수준의 시드를 설정
    ##즉 세션간들에 같은 난수 값을 사용하도록 하기위함.

@@@@@@@@  reduce_sum
    #특정 차원을 제거하고 합계
@@@@@@@@  reduce_mean
    #특정 차원을 제거하고 평균

@@@@@@@@  accuracy.eval(session=sess, feed_dict={~~})
  # sess.run() 과 같으나 보통 1개의 값을 실행시킬때 사용함
  
@@@@@@@@  arg_max() #위치를반환하는함수다
#플래그 0 (열 기준)
[[0.1, 0.3, 0.5], [0.3, 0.5, 0.1]]
[[0.5, 0.1, 0.3], [0.1, 0.3, 0.5]]
[[0.3, 0.5, 0.1], [0.5, 0.1, 0.3]]
#[[  1     2     0 ], [  2     0     1 ]]

#플래그 1 (행 기준)
[[0.1, 0.3, 0.5],
[0.3, 0.5, 0.1]]    #[[1 1 0],
[[0.5, 0.1, 0.3],
[0.1, 0.3, 0.5]]    # [0 1 1],
[[0.3, 0.5, 0.1],
[0.5, 0.1, 0.3]]    # [1 0 1]]

#플래그 2 (행열 기준)
[[0.1, 0.3, 0.5], [0.3, 0.5, 0.1]]     #[[2 1],
[[0.5, 0.1, 0.3], [0.1, 0.3, 0.5]]     # [0 2],
[[0.3, 0.5, 0.1], [0.5, 0.1, 0.3]]     # [1 0]]

@@@@@@@@  Reshape** ##자주씀 배열의 차원을 재배치해줌
t = np.array([[[0, 1, 2], 
               [3, 4, 5]],
              
              [[6, 7, 8], 
               [9, 10, 11]]])
t.shape
(2, 2, 3)
tf.reshape(t, shape=[-1, 3]).eval()
array([[ 0,  1,  2],
       [ 3,  4,  5],
       [ 6,  7,  8],
       [ 9, 10, 11]])
       
@@@@@@@@  squeeze # rank를 줄여줌
tf.squeeze([[0], [1], [2]]).eval()
array([0, 1, 2], dtype=int32)
@@@@@@@@  expand_dims # rank를 추가함
tf.expand_dims([0, 1, 2], 1).eval()
array([[0],
       [1],
       [2]], dtype=int32)


@@@@@@@@  one hot ## 열의 한자리만 1 그외는 0으로 만드는 역할 

tf.one_hot([[0], [1], [2], [0]], depth=3).eval()
#### 랭크가 2->3으로 변할수밖에없다 값을 리스트로 변환하기때문 one hot 은 rank를 expand
array([[[ 1.,  0.,  0.]],

       [[ 0.,  1.,  0.]],

       [[ 0.,  0.,  1.]],

       [[ 1.,  0.,  0.]]], dtype=float32)

t = tf.one_hot([[0], [1], [2], [0]], depth=3)
tf.reshape(t, shape=[-1, 3]).eval()

array([[ 1.,  0.,  0.],
       [ 0.,  1.,  0.],
       [ 0.,  0.,  1.],
       [ 1.,  0.,  0.]], dtype=float32)
       

@@@@@@@@  casting
In [32]:
tf.cast([1.8, 2.2, 3.3, 4.9], tf.int32).eval()
Out[32]:
array([1, 2, 3, 4], dtype=int32)
In [33]:
tf.cast([True, False, 1 == 1, 0 == 1], tf.int32).eval()
Out[33]:
array([1, 0, 1, 0], dtype=int32)
@@@@@@@@  Stack 배열에 추가하는것과 같다 다만 축에따라 달라짐

x = [1, 4]
y = [2, 5]
z = [3, 6]

# Pack along first dim.
tf.stack([x, y, z]).eval()

array([[1, 4],
       [2, 5],
       [3, 6]], dtype=int32)

tf.stack([x, y, z], axis=1).eval()

array([[1, 2, 3],
       [4, 5, 6]], dtype=int32)
       
       
@@@@@@@@  Ones like and Zeros like # 같은 shape를 0,1 값으로 만들어주는 역할

x = [[0, 1, 2],
     [2, 1, 0]]

tf.ones_like(x).eval()

array([[1, 1, 1],
       [1, 1, 1]], dtype=int32)

tf.zeros_like(x).eval()

array([[0, 0, 0],
       [0, 0, 0]], dtype=int32)
       
@@@@@@@@  Zip #묶어서 사용한다 한번에

for x, y in zip([1, 2, 3], [4, 5, 6]):
    print(x, y)
1 4
2 5
3 6

for x, y, z in zip([1, 2, 3], [4, 5, 6], [7, 8, 9]):
    print(x, y, z)
1 4 7
2 5 8
3 6 9
Transpose

t = np.array([[[0, 1, 2], [3, 4, 5]], [[6, 7, 8], [9, 10, 11]]])
pp.pprint(t.shape)
pp.pprint(t)
(2, 2, 3)
array([[[ 0,  1,  2],
        [ 3,  4,  5]],

       [[ 6,  7,  8],
        [ 9, 10, 11]]])

t1 = tf.transpose(t, [1, 0, 2])
pp.pprint(sess.run(t1).shape)
pp.pprint(sess.run(t1))
(2, 2, 3)
array([[[ 0,  1,  2],
        [ 6,  7,  8]],

       [[ 3,  4,  5],
        [ 9, 10, 11]]])

t = tf.transpose(t1, [1, 0, 2])
pp.pprint(sess.run(t).shape)
pp.pprint(sess.run(t))
(2, 2, 3)
array([[[ 0,  1,  2],
        [ 3,  4,  5]],

       [[ 6,  7,  8],
        [ 9, 10, 11]]])

t2 = tf.transpose(t, [1, 2, 0])
pp.pprint(sess.run(t2).shape)
pp.pprint(sess.run(t2))
(2, 3, 2)
array([[[ 0,  6],
        [ 1,  7],
        [ 2,  8]],

       [[ 3,  9],
        [ 4, 10],
        [ 5, 11]]])

t = tf.transpose(t2, [2, 0, 1])
pp.pprint(sess.run(t).shape)
pp.pprint(sess.run(t))
(2, 2, 3)
array([[[ 0,  1,  2],
        [ 3,  4,  5]],

       [[ 6,  7,  8],
        [ 9, 10, 11]]])
  
